<?php


/**
 * Implements hook_entity_info_alter().
 */
function display_pattern_options_entity_info_alter(&$entity_info) {
    _display_pattern_options_add_custom_view_modes($entity_info);
}


/**
 * Implements hook_preprocess_node().
 *
 * @param $variables
 */
function display_pattern_options_preprocess_node(&$variables) {
    _display_pattern_options_add_classes($variables);
    _display_pattern_options_set_tpl_variables($variables);
        _display_pattern_options_add_tpl_suggestions($variables);
}

/**
 * Add dpo classes to node
 *
 * @param $variables
 */
function _display_pattern_options_add_classes(&$variables){
    // do we need this??
    //$variables['classes_array'][] = drupal_html_class('content-pattern--' . $variables['type']);
    //$variables['classes_array'][] = drupal_html_class('display-pattern--' . $variables['view_mode']);
    $variables['classes_array'][] = drupal_html_class($variables['view_mode']);

    if (array_key_exists('display_pattern_options', $variables) && is_array($variables['display_pattern_options'])) {

        foreach ($variables['display_pattern_options'] as $key => $value) {
            $variables['classes_array'][] = drupal_html_class($variables['view_mode'] .'--'. $key .'-'. $value);
        }
    }
}

function _display_pattern_options_get_field_config(){
    return array(
        'hero' => array(
            'page' => array(
                'title' => 'title',
                'image' => 'field_page_image',
                'content' => 'body'
            ),
            'article' => array(
                'title' => 'title',
                'image' => 'field_image',
                'content' => 'body'
            )
        ),
        'promo' => array(
            'page' => array(
                'title' => 'title',
                'image' => 'field_page_image',
                'content' => 'body'
            ),
            'article' => array(
                'title' => 'title',
                'image' => 'field_image',
                'content' => 'body'
            )
        )
    );
}
// TODO: consolidate with _display_pattern_options_get_field_config
// we can prob use this instead of _display_pattern_options_get_field_config
function _display_pattern_options_get_field_config_2(){
    return array(
        'hero' => array(
            'page' => array(
                'title' => 'title',
                'field_page_image' => 'image',
                'body' => 'content'
            ),
            'article' => array(
                'title' => 'title',
                'field_image' => 'image',
                'body' => 'content'
            )
        ),
        'promo' => array(
            'page' => array(
                'title' => 'title',
                'field_page_image' => 'image',
                'body' => 'content'
            ),
            'article' => array(
                'title' => 'title',
                'field_image' => 'image',
                'body' => 'content'
            )
        )
    );
}

/**
 * set dpo tpl variables
 *
 * @param $variables
 */
function _display_pattern_options_set_tpl_variables(&$variables){

    $fields = _display_pattern_options_get_field_config();

    if (isset($fields[$variables['view_mode']])) {

        foreach ($fields[$variables['view_mode']][$variables['type']] as $key => $val) {

            if ($val == 'title') {
                $variables['content']['dpo_'. $key] = $variables['title'];

            } else {
                $variables['content']['dpo_'. $key] = $variables['content'][$val];
                unset($variables['content'][$val]);
            }
        }
    }
}

/**
 * Add template suggestions
 *
 * @param $variables
 */
function _display_pattern_options_add_tpl_suggestions(&$variables){
    $variables['theme_hook_suggestions'][] = 'node__' . $variables['view_mode'];
    $variables['theme_hook_suggestions'][] = 'node__' . $variables['view_mode'] . '_' . $variables['type'];
}

/**
 * Implements hook_theme_registery_alter().
 */
function display_pattern_options_theme_registry_alter(&$theme_registry) {
    // Defined path to current module.
    $module_path = drupal_get_path('module', 'display_pattern_options');
    // Find all .tpl.php files in this module's folder recursively.
    $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);
    // Itterate through all found template file objects.
    foreach ($template_file_objects as $key => $template_file_object) {
        // If the template has not already been overridden by a theme.
        if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
            // Alter the theme path and template elements.
            $theme_registry[$key]['theme path'] = $module_path;
            $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
            $theme_registry[$key]['type'] = 'module';
        }
    }
}

/**
 * Implements template_preprocess_field.
 *
 * @param  array $variables
 * @param  string $hook
 */
function display_pattern_options_preprocess_field(&$variables, $hook){

    _display_pattern_options_add_field_bem_classes($variables);

}

/**
 * Add BEM style classes to fields
 *
 * @param array $variables
 */
function _display_pattern_options_add_field_bem_classes(&$variables){

    $fields = _display_pattern_options_get_field_config_2();

    $view_mode = $variables['element']['#view_mode'];
    $bundle = $variables['element']['#bundle'];
    $field_name = $variables['element']['#field_name'];

    if (isset($fields[$view_mode][$bundle][$field_name])) {
       $filter = array(' ' => '-', '/' => '-', '[' => '-', ']' => '');
       $variables['classes_array'][] = drupal_clean_css_identifier($view_mode .'__'. $fields[$view_mode][$bundle][$field_name], $filter);
    }

//    if (array_key_exists($variables['element']['#bundle'], $bem_info)) {
//
//        $element = $variables['element'];
//
//        // field_ here is to be stripped from field colection bundles
//        $block =  str_replace(array('field_', '_'), array('', '-'), $element['#bundle']) .'__';
//
//        $elementClass = $block. str_replace(array('field_'. $bem_info[$element['#bundle']], '_'), array('', '-'), $element['#field_name']);
//
//        $filter = array(' ' => '-', '/' => '-', '[' => '-', ']' => '');
//
//        $variables['classes_array'][] = drupal_clean_css_identifier($elementClass, $filter);
//        $variables['classes_array'][] = drupal_clean_css_identifier($elementClass .'--'. str_replace('_', '-', $element['#view_mode']), $filter);
//
//    }
}

// @TODO: might be useful??
//function display_pattern_options_entity_view_mode_alter(&$view_mode, $context) {
//    // For nodes, change the view mode when it is teaser.
//    if ($context['entity_type'] == 'node' && $view_mode == 'teaser') {
//        $view_mode = 'my_custom_view_mode';
//    }
//}


/**
 * Add custom view modes (without using entity view mode module)
 *
 * NOTE: node view mode disabled by default
 * use display_pattern_options.install to enable per bundle
 *
 * @param $entity_info
 */
function _display_pattern_options_add_custom_view_modes(&$entity_info){

    $entities = _display_pattern_options_get_view_mode_config();

    foreach ($entities as $entity_type => $bundles) {

        foreach ($bundles as $bundle_type => $view_modes) {

            foreach ($view_modes as $view_mode){
                $entity_info[$entity_type]['view modes'][$view_mode] = array(
                    'label' => t(ucfirst($view_mode)),
                    'custom settings' => $entity_type == 'node' ? FALSE : TRUE,
                );
            }
        }
    }
}





/**
 * Build a display pattern option form element
 *
 * @param $label
 * @param $options
 * @param $default
 * @param bool $id
 * @param bool $parent
 * @return array
 */
function _display_pattern_options_build_form_element($label, $options, $default=false, $parent=false){

    $element = array(
        '#title' => $label,
        '#type' => 'select',
        '#description' => 'Select display pattern options for this build mode',
        '#options' => array('default' => '- Default -') + $options,
        '#default_value' => $default ? $default : 'default'
    );

    // this ensures form values are available in row_options (on views form) and does not include the parent wrapper element
    // see https://www.drupal.org/node/279246#comment-2292322
    if ($parent) {
        $element['#parents'] = array($parent, $label);

    } /*else {
        $element['#parents'] = array($label);
    }*/

    return $element;
}



/**
 * Build display pattern options form elements
 *
 * @param $view_mode
 * @param bool $form_state
 * @return array
 */
function _display_pattern_options_build_options_elements($view_mode, $form_state=false, $type=false){

    $view_mode_options = _display_pattern_options_get_options_by_view_mode($view_mode);

    $elements = array(
        '#type' => 'container',
        '#attributes' => array('class'=>array('js-replace-container')),
        'content' => array(),
        '#prefix' => '<div id="dpo-ajax-replace">',
        '#suffix' => '</div>'

    );

    // set parent form elements
    $parent = false;
    if ($type == 'view') {
        $parent = 'row_options';

    } else if ($type == 'panel') {
        $parent = 'dpo';

    } else if ($type == 'entityreference') {
        //$parent = 'settings';
    }

    foreach ($view_mode_options as $label => $options) {

        $default_option = false;

        if ($type == 'view') {
            // view
            if (isset($form_state['view'])) {
                // if we have form state use it to get currently stored values
                if (!$default_option = $form_state['view']->display[$form_state['view']->current_display]->display_options['row_options'][$label]) {
                    // fallback to default view display
                    $default_option = $form_state['view']->display['default']->display_options['row_options'][$label];
                }
            }

        } else if ($type == 'panel') {
            // panel
            $default_option = isset($form_state['conf']['dpo'][$label]) ? $form_state['conf']['dpo'][$label] : 'default';

        } else if ($type == 'entityreference') {
            $bundle = field_extract_bundle('node', 'article');
            $instances = field_info_instances('node', $bundle);
            // panel
            if (isset($form_state['formatter_settings']['field_article_ref']['dpo']['content'][$label])){
                $default_option = $form_state['formatter_settings']['field_article_ref']['dpo']['content'][$label];
            } else if (isset($instances['field_article_ref']['display']['default']['settings']['dpo']['content'][$label])) {
                $default_option = $instances['field_article_ref']['display']['default']['settings']['dpo']['content'][$label];
            }  else {
                $default_option = 'default';
            }
        }

        $elements['content'][$label] = _display_pattern_options_build_form_element($label, $options, $default_option, $parent);
    }

    return $elements;
}

/**
 * Get available view_mode_options by view_mode
 *
 * @param $view_mode
 * @return mixed
 */
function _display_pattern_options_get_options_by_view_mode($view_mode){
    $config = _display_pattern_options_get_options_config();

    return $config[$view_mode];
}

/**
 * Helper function to get all possible labels/modifiers
 *
 * @return array
 */
function _display_pattern_options_get_option_labels(){
    $view_modes = _display_pattern_options_get_options_config();

    $labels = array();
    foreach ($view_modes as $view_mode => $modifiers) {

        foreach ($modifiers as $modifier => $options) {
            $labels[$modifier] = $modifier;
        }

    }

    return $labels;
}

/**
 * Enable custom view modes for selected bundles
 *
 * NOTE:
 * called in .install
 * see display_pattern_options.module for _display_pattern_options_get_config()
 */
function _display_pattern_options_enable_view_modes_by_bundle(){

    $entities = _display_pattern_options_get_view_mode_config();

    foreach ($entities as $entity_type => $bundles) {
        foreach ($bundles as $bundle_type => $view_modes) {
            $settings = NULL;
            $settings = field_bundle_settings($entity_type, $bundle_type);
            foreach ($view_modes as $view_mode){
                $settings['view_modes'][$view_mode]['custom_settings'] = TRUE;
            }
            field_bundle_settings($entity_type, $bundle_type, $settings);
        }
    }
}

/**
 * Defines view_mode_options available for each view_mode
 *
 * @return array
 */
function _display_pattern_options_get_options_config(){
    return array(
        // view mode
        'hero' => array(
            // modifiers
            'colour' => array(
                'red' => 'Red',
                'green' => 'Green',
                'blue' => 'Blue'
            ),
            'align' => array(
                'left' => 'Left',
                'right' => 'Right',
            )
        ),
        // theme
        'promo' => array(
            // modifiers
            'colour' => array(
                'red' => 'Red',
                'green' => 'Green'
            )
        )
    );
}

/**
 * Defines custom view_modes by entity
 *
 * @return array
 */
function _display_pattern_options_get_view_mode_config(){
    return array(
        // entity type
        'node' => array(
            // bundle
            'page' => array(
                //  view mode / build mode / content pattern
                'hero',
                'promo'
            ),
            // bundle
            'article'=> array(
                //  view mode / build mode / content pattern
                'promo'
            )
        ),

        // entity type
        'user' => array(
            // bundle
            'user'=> array(
                //  view mode / build mode / content pattern
                'promo'
            )
        ),

        // entity type
        'taxonomy_term' => array(
            // bundle
            'taxonomy_term'=> array(
                //  view mode / build mode / content pattern
                'promo'
            )
        )
    );
}