<?php

/**
 * Implements hook_menu().
 *
 * @return array
 */
function display_pattern_options_menu(){
    return _display_pattern_options_add_custom_paths();
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param $form_state
 */
function display_pattern_options_form_views_ui_edit_display_form_alter(&$form, &$form_state){
    _display_pattern_options_views_form_alter($form, $form_state);
}

/**
 * Implements hook_entity_info_alter().
 */
function display_pattern_options_entity_info_alter(&$entity_info) {
    _display_pattern_options_add_custom_view_modes($entity_info);
}

/**
 * Implements hook_entity_prepare_view().
 *
 *
 * @param $entities
 * @param $type
 * @param $langcode
 */
function display_pattern_options_entity_prepare_view($entities, $type, $langcode){
    _display_pattern_options_expose_custom_view_config($entities);
}

/**
 * Implements hook_preprocess_node().
 *
 * @param $variables
 */
function display_pattern_options_preprocess_node(&$variables) {
    // Add view-mode class to nodes
    // do we need this??
    //$variables['classes_array'][] = drupal_html_class('content-pattern--' . $variables['type']);
    //$variables['classes_array'][] = drupal_html_class('display-pattern--' . $variables['view_mode']);
    $variables['classes_array'][] = drupal_html_class($variables['view_mode']);

    if (array_key_exists('display_pattern_options', $variables) && is_array($variables['display_pattern_options'])) {

        foreach ($variables['display_pattern_options'] as $key => $value) {
            $variables['classes_array'][] = drupal_html_class($variables['view_mode'] .'--'. $key .'-'. $value);
        }
    }
}

// @TODO: might be useful??
//function display_pattern_options_entity_view_mode_alter(&$view_mode, $context) {
//    // For nodes, change the view mode when it is teaser.
//    if ($context['entity_type'] == 'node' && $view_mode == 'teaser') {
//        $view_mode = 'my_custom_view_mode';
//    }
//}


/**
 * Add custom view modes (without using entity view mode module)
 *
 * NOTE: node view mode disabled by default
 * use display_pattern_options.install to enable per bundle
 *
 * @param $entity_info
 */
function _display_pattern_options_add_custom_view_modes(&$entity_info){

    $entities = _display_pattern_options_get_view_mode_config();

    foreach ($entities as $entity_type => $bundles) {

        foreach ($bundles as $bundle_type => $view_modes) {

            foreach ($view_modes as $view_mode){
                $entity_info[$entity_type]['view modes'][$view_mode] = array(
                    'label' => t(ucfirst($view_mode)),
                    'custom settings' => $entity_type == 'node' ? FALSE : TRUE,
                );
            }
        }
    }
}

/**
 * Add display_pattern_options value (from view setting) to node object so it available in preprocess
 *
 * see display_pattern_options_preprocess_node() where these are added to html as classes
 *
 * @param $entities
 */
function _display_pattern_options_expose_custom_view_config($entities){

    $modifiers = _display_pattern_options_get_option_labels();

    foreach ($entities as &$entity) {

        if (property_exists($entity, 'view')) {

            $entity->display_pattern_options = array();

            // get default view display settings
            foreach($entity->view->display['default']->display_options['row_options'] as $label => $option) {
                // filter out "non-display pattern option" row options
                if (in_array($label, $modifiers)) {
                    $entity->display_pattern_options[$label] = $option;
                }
            }

            // overwrite with current view display settings - if available (there is prob a better way of doing this)
            foreach($entity->view->display[$entity->view->current_display]->display_options['row_options'] as $label => $option) {
                // filter out "non-display pattern option" row options
                if (in_array($label, $modifiers)) {
                    $entity->display_pattern_options[$label] = $option;
                }
            }
        }
    }
}

/**
 * Add custom ajax endpoints
 *
 * @return array
 */
function _display_pattern_options_add_custom_paths(){

    $items = array();

    $items['display_pattern_options_ajax_menu_item'] = array(
        'page callback' => '_display_pattern_options_ajax_callback',
        // Ensure correct format for rendered content
        'delivery callback' => 'ajax_deliver',
        'access callback' => TRUE,
        // Ensure correct theme is used for custom ajax path
        'theme callback' => 'ajax_base_page_theme',
        'type' => MENU_CALLBACK
    );

    return $items;
}

/**
 * Build a display pattern option form element
 *
 * @param $label
 * @param $options
 * @param $default
 * @param bool $id
 * @param bool $parent
 * @return array
 */
function _display_pattern_options_build_form_element($label, $options, $default=false, $id=false, $parent=false, $type=false){

    $element = array(
        '#title' => $label,
        '#type' => 'select',
        '#description' => 'Select display pattern options for this build mode',
        '#options' => array('default' => '- Default -') + $options,
        '#default_value' => $default ? $default : 'default'
    );

    // this ensures form values are available in row_options (on views form) and does not include the parent wrapper element
    // see https://www.drupal.org/node/279246#comment-2292322
    if ($parent) {
        $element['#parents'] = array($parent, $label);

    } else {
        $element['#parents'] = array($label);
    }



    if ($id) {
        // this adds id (that is normally auto added)
        // when we manually build element for ajax replace
        $element['#id'] = $id;

        if ($type == 'view') {
            $element['#name'] = 'row_options['. $label . ']';

        } elseif ($type == 'panel') {
            $element['#name'] = 'dpo['. $label .']';
        }

    }

    return $element;
}

/**
 * Add display_pattern_options to view mode forms
 *
 * @param $form
 * @param $form_state
 */
function _display_pattern_options_views_form_alter(&$form, &$form_state){

    if ($form_state['section'] != 'row_options') {
        return;
    }

    $form['options']['row_options']['view_mode']['#ajax'] = array(
        // callback wont work here (ctools)
        // so we provide custom path which provides callback
        'path' => 'display_pattern_options_ajax_menu_item',
    );

    if (array_key_exists('row_options', $form_state['input'])) {
        $view_mode = $form_state['input']['row_options']['view_mode'];
    } else{
        $view_mode = $form['options']['row_options']['view_mode']['#default_value'];
    }

    $form['options']['row_options']['dpo'] = _display_pattern_options_build_options_elements($view_mode, $form_state, 'view');
}

/**
 * Build display pattern options form elements
 *
 * @param $view_mode
 * @param bool $form_state
 * @return array
 */
function _display_pattern_options_build_options_elements($view_mode, $form_state=false, $type=false){

    $view_mode_options = _display_pattern_options_get_options_by_view_mode($view_mode);

    $elements = array(
        '#type' => 'container',
        '#attributes' => array('class'=>array('js-replace-container')),
        'content' => array()
    );

    // set parent form elements
    $parent = false;
//    if (isset($form_state['view'])) {
//        $parent = 'row_options';
//
//    } elseif (isset($form_state['conf']['build_mode'])) {
//        $parent = 'dpo';
//    }

    $id_prefix = '';
    if ($type == 'view') {
        $parent = 'row_options';
        $id_prefix = 'edit-row-options-';

    } elseif ($type == 'panel') {
        $parent = 'dpo';
        $id_prefix = 'edit-dpo-';
    }

    if (!$form_state) {
        $elements['#id'] = 'edit-dpo';
        $elements['#attributes']['class'][] = 'form-wrapper';
    }

    foreach ($view_mode_options as $label => $options) {

        $default_option = false;
        $id = false;

        if ($form_state) {

            if ($type == 'view') {
                // view
                // if we have form state use it to get currently stored values
                if (!$default_option = $form_state['view']->display[$form_state['view']->current_display]->display_options['row_options'][$label]) {
                    // fallback to default view display
                    $default_option = $form_state['view']->display['default']->display_options['row_options'][$label];
                }

            } elseif ($type == 'panel') {
                // panel
                $default_option = isset($form_state['conf']['dpo'][$label]) ? $form_state['conf']['dpo'][$label] : 'default';
            }

        } else {
            // if we do not have form state it is ajax replace and we need to explicitly specify id of form elements
            // (they are normally auto created by form api)
            $id = $id_prefix . $label;

        }

        $elements['content'][] = _display_pattern_options_build_form_element($label, $options, $default_option, $id, $parent, $type);
    }

    return $elements;
}

/**
 * Custom ajax callback
 *
 * replace all display_pattern_option select elements with those applicable to selected view_mode
 * when view_mode element is changed
 *
 * @return array
 */
function _display_pattern_options_ajax_callback(){

    $view_mode = false;

    // views
    if (array_key_exists('row_options', $_POST) && array_key_exists('view_mode', $_POST['row_options'])) {
        $view_mode = $_POST['row_options']['view_mode'];
    }

    // panels
//    if (array_key_exists('build_mode', $_POST)) {
//        $view_mode = $_POST['build_mode'];
//    }

    $elements = _display_pattern_options_build_options_elements($view_mode, false, 'view');

    $commands = array();

    $commands[] = ajax_command_replace('.js-replace-container', drupal_render($elements));

    return array(
        '#type' => 'ajax',
        '#commands' => $commands
    );
}

/**
 * Get available view_mode_options by view_mode
 *
 * @param $view_mode
 * @return mixed
 */
function _display_pattern_options_get_options_by_view_mode($view_mode){
    $config = _display_pattern_options_get_options_config();

    return $config[$view_mode];
}

/**
 * Helper function to get all possible labels/modifiers
 *
 * @return array
 */
function _display_pattern_options_get_option_labels(){
    $view_modes = _display_pattern_options_get_options_config();

    $labels = array();
    foreach ($view_modes as $view_mode => $modifiers) {

        foreach ($modifiers as $modifier => $options) {
            $labels[$modifier] = $modifier;
        }

    }

    return $labels;
}

/**
 * Enable custom view modes for selected bundles
 *
 * NOTE:
 * called in .install
 * see display_pattern_options.module for _display_pattern_options_get_config()
 */
function _display_pattern_options_enable_view_modes_by_bundle(){

    $entities = _display_pattern_options_get_view_mode_config();

    foreach ($entities as $entity_type => $bundles) {
        foreach ($bundles as $bundle_type => $view_modes) {
            $settings = NULL;
            $settings = field_bundle_settings($entity_type, $bundle_type);
            foreach ($view_modes as $view_mode){
                $settings['view_modes'][$view_mode]['custom_settings'] = TRUE;
            }
            field_bundle_settings($entity_type, $bundle_type, $settings);
        }
    }
}

/**
 * Defines view_mode_options available for each view_mode
 *
 * @return array
 */
function _display_pattern_options_get_options_config(){
    return array(
        // view mode
        'hero' => array(
            // modifiers
            'colour' => array(
                'red' => 'Red',
                'green' => 'Green',
                'blue' => 'Blue'
            ),
            'align' => array(
                'left' => 'Left',
                'right' => 'Right',
            )
        ),
        // theme
        'promo' => array(
            // modifiers
            'colour' => array(
                'red' => 'Red',
                'green' => 'Green'
            )
        )
    );
}

/**
 * Defines custom view_modes by entity
 *
 * @return array
 */
function _display_pattern_options_get_view_mode_config(){
    return array(
        // entity type
        'node' => array(
            // bundle
            'page' => array(
                //  view mode / build mode / content pattern
                'hero',
                'promo'
            ),
            // bundle
            'article'=> array(
                //  view mode / build mode / content pattern
                'promo'
            )
        ),

        // entity type
        'user' => array(
            // bundle
            'user'=> array(
                //  view mode / build mode / content pattern
                'promo'
            )
        ),

        // entity type
        'taxonomy_term' => array(
            // bundle
            'taxonomy_term'=> array(
                //  view mode / build mode / content pattern
                'promo'
            )
        )
    );
}