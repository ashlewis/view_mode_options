<?php

/**
 * Implements hook_menu().
 *
 * @return array
 */
function display_pattern_options_panels_menu(){
    return _display_pattern_options_panels_add_custom_paths();
}

/**
* Implements hook_form_FORM_ID_alter().
*
* @param $form
* @param $form_state
*/
function display_pattern_options_panels_form_ctools_node_content_type_edit_form_alter(&$form, &$form_state){
    _display_pattern_options_panels_form_alter($form, $form_state);
}

/**
 * Implements hook_panels_pane_content_alter().
 *
 * @param $content
 * @param $pane
 * @param $args
 * @param $contexts
 */
function display_pattern_options_panels_panels_pane_content_alter($content, $pane, $args, $contexts){
    _display_pattern_options_panels_expose_custom_pane_config($content, $pane);
}

/**
 * Add custom ajax endpoints
 *
 * @return array
 */
function _display_pattern_options_panels_add_custom_paths(){

    $items = array();

    $items['display_pattern_options_panels_ajax_menu_item'] = array(
        'page callback' => '_display_pattern_options_panels_ajax_callback',
        // Ensure correct format for rendered content
        'delivery callback' => 'ajax_deliver',
        'access callback' => TRUE,
        // Ensure correct theme is used for custom ajax path
        'theme callback' => 'ajax_base_page_theme',
        'type' => MENU_CALLBACK
    );

    return $items;
}

/**
 * Custom ajax callback
 *
 * replace all display_pattern_option select elements with those applicable to selected view_mode
 * when view_mode element is changed
 *
 * @return array
 */
function _display_pattern_options_panels_ajax_callback(){

    list($form, $form_state, $form_id, $form_build_id, $commands) = ajax_get_form();

    $view_mode = false;

    // panels
    if (array_key_exists('build_mode', $_POST)) {
        $view_mode = $_POST['build_mode'];
    }

    $elements = _display_pattern_options_build_options_elements($view_mode, false, 'panel');

    $commands = array();

    $commands[] = ajax_command_replace('.js-replace-container', drupal_render($elements));

    return array(
        '#type' => 'ajax',
        '#commands' => $commands
    );
}

/**
 * Add display_pattern_options value (from panel pane setting) to node object so it available in preprocess
 *
 * @param $content
 * @param $pane
 */
function _display_pattern_options_panels_expose_custom_pane_config($content, $pane){
    if (array_key_exists('dpo', $pane->configuration)) {
        $content->content['#node']->display_pattern_options = $pane->configuration['dpo'];
    }
}

/**
 * Add display_pattern_options to view mode forms
 *
 * @param $form
 * @param $form_state
 */
function _display_pattern_options_panels_form_alter(&$form, &$form_state){

    // @todo: what does this do?
    // form_state['input'] OR form_state['values'] are never set
    if (array_key_exists('build_mode', $form_state['input'])) {
        $view_mode = $form_state['input']['build_mode'];
    } else{
        $view_mode = $form['build_mode']['#default_value'];
    }

    $form['build_mode']['#ajax'] = array(
        // callback wont work here (ctools)
        // so we provide custom path which provides callback
        'path' => 'display_pattern_options_panels_ajax_menu_item',
    );

    $form['dpo'] = _display_pattern_options_build_options_elements($view_mode, $form_state, 'panel');

    $form['#submit'][] = '_display_pattern_options_panels_form_submit';
}

/**
 * Custom submit function to store added config values
 *
 * @param $form
 * @param $form_state
 */
function _display_pattern_options_panels_form_submit($form, &$form_state) {

    $form_state['conf']['dpo'] = array();

    foreach ($form_state['input']['dpo'] as $label => $value) {
        $form_state['conf']['dpo'][$label] = $value;
    }
}