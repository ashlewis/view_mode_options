<?php

/**
 * Implements hook_menu().
 *
 * @return array
 */
function display_pattern_options_panels_menu(){
    return _display_pattern_options_panels_add_custom_paths();
}

/**
 * Add custom ajax endpoints
 *
 * @return array
 */
function _display_pattern_options_panels_add_custom_paths(){

    $items = array();

    $items['display-pattern-options/panels'] = array(
        'page callback' => '_display_pattern_options_panels_ajax_get_form',
        // pass form id as argument to page callback function
        'page arguments' => array('ctools_node_content_type_edit_form'),
        // Ensure correct format for rendered content
        'delivery callback' => 'ajax_deliver',
        'access callback' => TRUE,
        // Ensure correct theme is used for custom ajax path
        'theme callback' => 'ajax_base_page_theme',
        'type' => MENU_CALLBACK
    );

    return $items;
}

/**
 * Menu callback; handles AJAX form submissions similar to ajax_form_callback(), but can be used for uncached forms.
 *
 * NOTE; copied from views ui module
 *
 * ajax_form_callback(), the menu callback for the system/ajax path, requires
 * the form to be retrievable from the form cache, because it lacks a trusted
 * $form_id argument with which to call drupal_retrieve_form(). When AJAX is
 * wanted on a non-cacheable form, #ajax['path'] can be set to a path whose
 * menu router item's 'page callback' is this function, and whose
 * 'page arguments' is the form id, optionally followed by additional build
 * arguments, as expected by drupal_get_form().
 *
 * The same caution must be used when defining a hook_menu() entry with this
 * page callback as is used when defining a hook_menu() entry with the
 * 'drupal_get_form' page callback: a 'page arguments' must be specified with a
 * literal value as the first argument, because $form_id determines which form
 * builder function gets called, so must be safe from user tampering.
 *
 * @see drupal_get_form()
 * @see ajax_form_callback()
 * @see http://drupal.org/node/774876
 */
function _display_pattern_options_panels_ajax_get_form($form_id) {

    // we need to include this (for validation function), which is why we cant use views ui function directly
    require_once('/sites/all/modules/ctools/plugins/content_types/node/node.inc');

    // we could do this to avoid duplicating existing code
    // but then would require views ui as dependency??
    //return views_ui_ajax_get_form($form_id);

    // @see ajax_get_form()
    $form_state = array(
        'no_redirect' => TRUE,
    );
    $form_state['rebuild_info']['copy']['#build_id'] = TRUE;
    $form_state['rebuild_info']['copy']['#action'] = TRUE;

    // @see drupal_get_form()
    $args = func_get_args();
    array_shift($args);
    $form_state['build_info']['args'] = $args;

    $form = drupal_build_form($form_id, $form_state);

    // @see ajax_form_callback()
    if (!empty($form_state['triggering_element'])) {
        $callback = $form_state['triggering_element']['#ajax']['callback'];
    }
    if (!empty($callback) && function_exists($callback)) {
        return $callback($form, $form_state);
    }
}

/**
* Implements hook_form_FORM_ID_alter().
*
* @param $form
* @param $form_state
*/
function display_pattern_options_panels_form_ctools_node_content_type_edit_form_alter(&$form, &$form_state){
    _display_pattern_options_panels_form_alter($form, $form_state);
}

/**
 * Implements hook_panels_pane_content_alter().
 *
 * @param $content
 * @param $pane
 * @param $args
 * @param $contexts
 */
function display_pattern_options_panels_panels_pane_content_alter($content, $pane, $args, $contexts){
    _display_pattern_options_panels_expose_custom_pane_config($content, $pane);
}





/**
 * Add display_pattern_options value (from panel pane setting) to node object so it available in preprocess
 *
 * @param $content
 * @param $pane
 */
function _display_pattern_options_panels_expose_custom_pane_config($content, $pane){
    if (array_key_exists('dpo', $pane->configuration)) {
        $content->content['#node']->display_pattern_options = $pane->configuration['dpo'];
    }
}

/**
 * Add display_pattern_options to view mode forms
 *
 * @param $form
 * @param $form_state
 */
function _display_pattern_options_panels_form_alter(&$form, &$form_state){

    if (array_key_exists('build_mode', $form_state['values'])) {
        $view_mode = $form_state['values']['build_mode'];
    } else{
        $view_mode = $form['build_mode']['#default_value'];
    }

    $form['build_mode']['#ajax'] = array(
        // callback wont work directly here (ctools)
        // we must provide custom path which needs to do some work before invoking callback provided here
        'path' => 'display-pattern-options/panels',
        'callback' => '_display_pattern_options_panels_ajax_callback',
        'wrapper' => 'dpo-ajax-replace',
    );

    $form['dpo'] = _display_pattern_options_build_options_elements($view_mode, $form_state, 'panel');

    $form['#submit'][] = '_display_pattern_options_panels_form_submit';
}

/**
 * Custom ajax callback
 *
 * replace all display_pattern_option select elements with those applicable to selected view_mode
 * when view_mode element is changed
 *
 * @return array
 */
function _display_pattern_options_panels_ajax_callback(&$form, &$form_state){

    return $form['dpo'];

//    list($form, $form_state, $form_id, $form_build_id, $commands) = ajax_get_form();
//
//
//     $form_state['rebuild'] = TRUE;
//     //$form['dpo'] =  _display_pattern_options_build_options_elements($_POST['build_mode'], $form_state, 'panel');
//     return $form['dpo'];
//
//    $view_mode = false;
//
//    // panels
//    if (array_key_exists('build_mode', $_POST)) {
//        $view_mode = $_POST['build_mode'];
//    }
//
//    $elements = _display_pattern_options_build_options_elements($view_mode, false, 'panel');
//
//    $commands = array();
//
//    $commands[] = ajax_command_replace('.js-replace-container', drupal_render($elements));
//
//    return array(
//        '#type' => 'ajax',
//        '#commands' => $commands
//    );
}

/**
 * Custom submit function to store added config values
 *
 * @param $form
 * @param $form_state
 */
function _display_pattern_options_panels_form_submit($form, &$form_state) {

    $form_state['conf']['dpo'] = array();

    foreach ($form_state['input']['dpo'] as $label => $value) {
        $form_state['conf']['dpo'][$label] = $value;
    }
}